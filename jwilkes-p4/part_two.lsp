(DEFUN demo()
    (setq *state* 0)
        (let((in (open "theString.txt")))
        (eval(read-line in))
        (close in)
    )
)

(DEFUN eval(path)
    (dotimes(n(length path))
        (setq route(subseq path n(+ n 1)))
        (cond
            ((equal *state* 0) (stateZero route))
            ((equal *state* 1) (stateOne route))
            ((equal *state* 2) (stateTwo route))
            ((equal *state* 3) (stateThree route))
            ((equal *state* 4) (stateFour route))
        )
        (cond((equal n(- (length path) 1))(acceptState * state*)))
    )
)

(DEFUN stateZero(route)
    (cond((null route) nil)
        ((equal route x)(setq * state * 0))
        ((equal route y)(setq * state * 1))
        (t(setq * state * "x"))
    )
)

(DEFUN stateOne(route)
    (cond((null route) nil)
        ((equal route x)(setq * state * 2))
        (t(setq * state * "x"))
    )
)

(DEFUN stateTwo(route)
    (cond((null route) nil)
        ((equal route x)(setq * state * 2))
        ((equal route y)(setq * state * 3))
        (t(setq * state * "x"))
    )
)

(DEFUN stateThree(route)
    (cond((null route) nil)
        ((equal route x)(setq * state * 3))
        ((equal route z)(setq * state * 4))
        (t(setq * state * "x"))
    )
)

(DEFUN stateFour(route)
    (cond((null route) nil)
        ((equal route x)(setq * state * 4))
        ((equal route a)(setq * state * 1))
        (t(setq * state * "x"))
    )
)

(DEFUN acceptState (n)
    (cond
        ((equal n 1)(princ "\nLegal")
        ((equal n 3)(princ "\nLegal")
        (t(princ "\nNot Legal"))
    )
)

