(DEFUN start(a)
	;(defvar *count* 0)
	(setq *state* 0)
	(let ((in (open a)))
	  (eval (read-line in))
	  (close in)
	)
)

(DEFUN eval(path) 
	;(princ path)
	;(princ *count*)
	;(princ (length path))
	(dotimes (n (length path))
		(cond ((equal n ( - (length path) 1)) (acceptState n)))
		(setq route (subseq path n (+ n 1)))
		
		(cond )

		(stateZero route)
		(princ *state*)
		(princ route)
		(princ " ")
	) 
)

(DEFUN stateZero (route)
	(cond ((null route) nil)
			((equal route "x") (setq *state* 0))
			((equal route "y") (setq *state* 1))
	)
)

(DEFUN acceptState (n)
	(cond ((equal n 1) t)
		((equal n 3) t)
		(f))
)