(DEFUN demo()
	(setq *startState* 0)
	(setq fp (open "theString.txt" :direction :input))
  (setq *path* (read fp "done"))
	(cond 
			((equal *startState* 0) (stateZero *path*))
			((equal *startState* 1) (stateOne *path*))
			((equal *startState* 2) (stateTwo *path*))
			((equal *startState* 3) (stateThree *path*))
			((equal *startState* 4) (stateFour *path*))
	)
)

(DEFUN stateZero (route)
	(cond ((null (car route)) acceptState 0)
			((string-equal (car route) "X") (stateZero (cdr route)))
			((string-equal (car route) "Y") (stateOne (cdr route)))
			(t (princ "Illegal route"))
	)
)

(DEFUN stateOne (route)
	(cond ((null route) (acceptState 1))
			((string-equal (car route) "X") (stateTwo (cdr route)))
			(t (princ "Illegal route"))
	)
)

(DEFUN stateTwo (route)
	(cond ((null route) (acceptState 2))
			((string-equal (car route) "X") (stateTwo (cdr route)))
			((string-equal (car route) "Y") (stateThree (cdr route)))
			(t (princ "Illegal route"))
	)
)

(DEFUN stateThree (route)
	(cond ((null route) (acceptState 3))
			((string-equal (car route) "X") (stateThree (cdr route)))
			((string-equal (car route) "Z") (stateFour (cdr route)))
			(t (princ "Illegal route"))
	)
)

(DEFUN stateFour (route)
	(cond ((null route) acceptState 4)
			((string-equal (car route) "X") (stateFour (cdr route)))
			((string-equal (car route) "A") (stateOne (cdr route)))
			(t (princ "Illegal route"))
	)
)

(DEFUN acceptState (n)
	(cond ((equal n 1) (princ "Legal"))
		((equal n 3) (princ "Legal"))
		(t (princ "Illegal route"))
	)
)