<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html><head>

  
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  
  <meta name="Author" content="John Coffey">

  
  <meta name="GENERATOR" content="Mozilla/4.61 [en] (WinNT; U) [Netscape]"><title>PL Assignment 2</title></head><body>
<center><b>COP4020: Programming Languages</b> <br>
<b>John W. Coffey</b></center>

<p><b>Programming project # 2: Semantic checker and code generator</b></p>


<p><b>Project Description</b></p>

<p>You will implement this program in the <i>C programming language</i>.
Your program must compile using <b>gcc</b> in the <b>Multiplatform lab</b>.
We will add integer variable declarations immediately after the <span style="font-family: monospace;">begin</span> token at the start of the
program:</p>

<p><span style="font-family: monospace;">begin</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; int x, y, z, b;</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; x = y + z;</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; z = b - 5;</span><br style="font-family: monospace;">
<span style="font-family: monospace;">end</span></p>

<p>Declarations should also work as multi-line constructs:</p>

<p><span style="font-family: monospace;">begin</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; int x;<br>
&nbsp; int y;<br>
&nbsp; int z, b;</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; x = (y + z) * (z - asdf_9);</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; z = b - 5;</span><br style="font-family: monospace;">
<span style="font-family: monospace;">end</span></p>

<p>Your program will do checks to ensure that variables have been
declared before they are used and we will have two additional error
messages "undefined variable &lt;varname&gt;" and "illegal redefinition
&lt;varname&gt;." If the program is syntactically and semantically
correct, it will generate low-level, register-based code for the
assignment statements as shown below.</p>

<p>As in project 1, your program will read multiple assignment
statements fro<span style="font-family: Times New Roman,Times,serif;">m
a text file specified by a command-line argument. The statements will
be terminated with semicolons </span><span style="font-family: monospace;">(;)</span><span style="font-family: Times New Roman,Times,serif;">. Your group of
assignment statements will again be delimited by the </span><span style="font-family: monospace;">"begin"</span><span style="font-family: Times New Roman,Times,serif;"> &nbsp;and </span><span style="font-family: monospace;">"end"</span><span style="font-family: Times New Roman,Times,serif;"> reserved words. The
intent is that legal programs will be free format, meaning that
indentations do not matter, multiple statements are permitted on a
line, &nbsp;a statement may appear on multiple lines (with no
continuation character). Finally, as before, your program must include
a capability to provide comments. Comments will be single line and they
will start with a tilda:</span></p>

<p><span style="font-family: Times New Roman,Times,serif;">~ this is a
comment<br>
</span></p>

<p>You will parse the statements (hopefully all this is good from
Project 1), keeping track of where you are in the string, and report
whether or not the<span style="font-family: Times New Roman,Times,serif;"> input program is
legal.</span> Your program will report either</p>

<p>- The program is legal - output is in file &lt;filename&gt;. <br>
- Line <span style="font-family: monospace;">&lt;integer&gt;</span>
contains error <tt>&lt;errormsg&gt;</tt> <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(missing ']', missing ')', illegal number, illegal identifier,
unterminated comment, undeclared variable, etc)</p>

<p>If all statements are legal, you will generate an assembly-like code
loading registers, doing computations and storing register results. You
will also show the postfix version of the expression. The output will
go into a file with the file name of the input file and a file
extension&nbsp; .out. So, if the input file were named <span style="font-family: 'courier new',courier,sans-serif;">prog.in</span>,
the generated code would go to a file named <span style="font-family: 'courier new',courier,sans-serif;">prog.out</span>.
If the program is illegal for any reason, you do not need to generate
code.</p>

<p>You will use the lexical analyzer and parser from Project 1. You
will add variable declaration and code generation capabilities to that
project.</p>

<p><span style="font-weight: bold;">Input and output:</span><br>
<br>
Given this as the input file:<br>
<span style="font-family: monospace;">&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;~ This is a comment</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br style="font-family: monospace;">
<span style="font-family: monospace;">begin<br>
&nbsp; int </span><span style="font-family: monospace;">ghgghg, </span><span style="font-family: monospace;">abc_edef;<br>
&nbsp; int b, qwerty;<br>
&nbsp; int abcd, a, b, c; <br style="font-family: monospace;">
</span> <span style="font-family: monospace;">&nbsp; ghgghg =
(abc_edef * b);</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; qwerty=(6 * (a / b));</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; qwerty=((6 - abcd)*(a +
b));</span><br style="font-family: monospace;">
<span style="font-family: monospace;">&nbsp; xyz = (9*8*7*6)/(a+b+c);</span><br style="font-family: monospace;">
<span style="font-family: monospace;">end.</span><br>
<br>
<br>
Your program should produce output similar to this:<br>
<br>
<span style="font-family: monospace;">Compiling prog.in</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = abc_edef</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = b</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">ghgghg = R0</span><br style="font-family: monospace;">
<span style="font-family: monospace;">*****[abc_edef,b,*]*****</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = 6</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = a</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R2 = b</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = R1 / R2</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">qwerty = R0</span><br style="font-family: monospace;">
<span style="font-family: monospace;">*****[6,a,b,/,*]*****</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = 6</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = abcd</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 - R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = a</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R2 = b</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = R1 + R2</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">qwerty = R0</span><br style="font-family: monospace;">
<span style="font-family: monospace;">*****[6,abcd,-,a,b,+,*]*****</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = 9</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = 8</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = 7</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = 6</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 * R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = a</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R2 = b</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = R1 + R2</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R2 = c</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R1 = R1 + R2</span><br style="font-family: monospace;">
<span style="font-family: monospace;">R0 = R0 / R1</span><br style="font-family: monospace;">
<span style="font-family: monospace;">xyz = R0</span><br style="font-family: monospace;">
<span style="font-family: monospace;">*****[9,8,*,7,*,6,*,a,b,+,c,+,/]*****</span></p>

<p><span style="font-family: 'times new roman',times,serif;">For the
following illegal program, output would be as indicated:</span></p>

<pre>&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>&nbsp;~ This is a comment<br>&nbsp;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>begin<br>&nbsp; int ghgghg, abc_edef;<br>&nbsp; abc = (abc_edef * b);<br>end.<br><br>Error line 6: variable abc is undefined.</pre>

<p><span style="font-family: monospace;"></span></p>

<p><b>Deliverables</b></p>

<p>1. A design document "<span style="font-family: monospace;">FunctionalDecomposition.xxx</span>"<br>
2. A User's Manual "<span style="font-family: monospace;">UsersManual.xxx</span>"<br>
3. Your source code<br>
4. A <span style="font-family: Courier New,Courier,monospace;">makefile</span><br>
5. Four (4) legal programs of increasing complexity; four (4) illegal
programs of increasing complexity.<br>
6. A script (run) to execute all your programs (legal and illegal)</p>

<p><b>Submission: </b><span style="font-weight: bold;">&nbsp;</span></p>

<p>1. Compile and run your program one last time before submitting it.
Your program must run with gcc in the Linux lab.<br>
2. Place every file in your submission in a SINGLE DIRECTORY named
&lt;first initial&gt;&lt;last name&gt;-p&lt;number&gt;. For instance, I
would create directory:<br>
&nbsp;&nbsp;&nbsp;&nbsp; jcoffey-p2&nbsp; for project 2.<br>
3. zip that FOLDER into a .zip file with the SAME NAME. This means that
inside your zip file, you will have exactly one folder (from the
example: jcoffey-p2) showing at the top level. Inside that folder will
be ALL the files in your project.<br>
4. DO NOT make separate folders for documentation and source files (or
anything else) inside the main folder. Having such a setup simply
necessitates more navigation time to get where we need to go to grade.<br>
5. Any needed input files should be in the top-level folder along with
the source code.<br>
6. MacOS users - remove the _MacOS_ utility folder before you zip up
the file. If you cannot, delete it from the archive once the archive is
created. It just takes up space and is not needed for anything we do
with your submissions.<br>
7. Login to UWF's Canvas system. Select our course.<br>
8. Go to the appropriate assignment, choose your program file and click
the "Upload Assignment" button.<br>
9. Upload your file. Check to insure that the file was uploaded.<br>
10. Be sure to review the university policy on academic dishonesty.
This is an individual project</p>

<p>Please review the policy on ACADEMIC MISCONDUCT. This is an <i>individual
assignment.</i></p>

<p>&nbsp; <br>
&nbsp; <br>
&nbsp; <br>
&nbsp;</p>


</body></html>